name: Batch

on:
  workflow_dispatch:
    inputs:
      P1:
        description: "P1 tag"
        required: true
        default: 'latest'
      P2:
        description: "P2 tag"
        required: true
        default: 'latest'
      P3:
        description: "P3 tag"
        required: true
        default: 'latest'
      P4:
        description: "P4 tag"
        required: true
        default: 'latest'
      P5:
        description: "P5 tag"
        required: true
        default: 'latest'
      P6:
        description: "P6 tag"
        required: true
        default: 'latest'
      batch:
        description: "Batch player count"
        required: true
        type: choice
        options:
          - 2
          - 3
          - 6
      batch_size:
        description: "Batch size"
        required: true
        default: 100

jobs:
  generator:
    runs-on: node
    outputs:
      matrix: ${{ steps.generator.outputs.matrix }}
    steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '12.x'
      - id: generator
        run: |
          
          node -p "return 'Hello World!'"

          # MAPS=()

          # if 

          # for i in {1..${{ github.event.inputs.runs }}}
          # do
          #   MAPS="$MAPS ${{ github.event.inputs.maps }} "
          # done

          # MAP_ARRAY=($MAPS)

          # SEED=42
          # MAP_JSON=""
          # for ELEMENT in "${MAP_ARRAY[@]}"
          # do
          #     MAP_JSON="$MAP_JSON{\"map\": $ELEMENT, \"seed\": $SEED}, "
          #     SEED=$((SEED+1))
          # done

          # echo "{\"run\":[ $MAP_JSON ]}"

          # echo "matrix={\"run\":[ $MAP_JSON ]}" >> $GITHUB_OUTPUT

  run:
    needs: generator
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.generator.outputs.matrix)}}
      max-parallel: 19
    steps:
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_PAT }}

      - name: Run games
        run: |
          # echo MAP=${{ matrix.run.map }}
          # echo SEED=${{ matrix.run.seed }}
          # echo P1=${{ github.event.inputs.P1 }}
          # echo P2=${{ github.event.inputs.P2 }}
          # echo P3=${{ github.event.inputs.P3 }}
          # echo P4=${{ github.event.inputs.P4 }}
          # echo P5=${{ github.event.inputs.P5 }}
          # echo P6=${{ github.event.inputs.P6 }}

  # run:
  #   needs: generator
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{fromJSON(needs.generator.outputs.matrix)}}
  #     max-parallel: 19
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Login to registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ secrets.GH_USERNAME }}
  #         password: ${{ secrets.GH_PAT }}

  #     - name: Run games
  #       run: |
  #         echo MAP=${{ matrix.run.map }} >> .env
  #         echo SEED=${{ matrix.run.seed }} >> .env
  #         echo P1=${{ github.event.inputs.P1 }} >> .env
  #         echo P2=${{ github.event.inputs.P2 }} >> .env
  #         echo P3=${{ github.event.inputs.P3 }} >> .env
  #         echo P4=${{ github.event.inputs.P4 }} >> .env
  #         echo P5=${{ github.event.inputs.P5 }} >> .env
  #         echo P6=${{ github.event.inputs.P6 }} >> .env

  #         docker compose up

  #         mkdir -p results/${{ matrix.run.map }}
  #         mv result.log results/${{ matrix.run.map }}/result-${{ matrix.run.seed }}.log

  #     - name: Upload run data
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: results
  #         path: results/

  # collect:
  #   needs: run
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3

  #     - run: |
  #         for DIRECTORY in results/*/;
  #         do
  #             FILENAME=`ls -AU $DIRECTORY | head -1`
  #             HEADER=$(head -n 1 $DIRECTORY/$FILENAME)
  #             echo $HEADER >> results.log
  #             for FILE in $DIRECTORY*;
  #             do
  #                 DATA=`cat $FILE | head -2 | tail -1`
  #                 echo $DATA >> results.log
  #             done
  #             mv results.log $DIRECTORY/results.log
  #         done

  #     - name: Upload run data
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: results
  #         path: results/
