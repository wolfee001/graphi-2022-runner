name: Batch

on:
  workflow_dispatch:
    inputs:
      P1:
        description: "P1 tag"
        required: true
        default: 'latest'
      P2:
        description: "P2 tag"
        required: true
        default: 'latest'
      P3:
        description: "P3 tag"
        required: true
        default: 'latest'
      P4:
        description: "P4 tag"
        required: true
        default: 'latest'
      P5:
        description: "P5 tag"
        required: true
        default: 'latest'
      P6:
        description: "P6 tag"
        required: true
        default: 'latest'
      batch:
        description: "Batch player count"
        required: true
        type: choice
        options:
          - 2
          - 3
          - 6
      batch_size:
        description: "Batch size"
        required: true
        default: 100

jobs:
  generator:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generator.outputs.matrix }}
    steps:
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '12.x'
      - id: generator
        run: |
          GENERATED=`node -p "
          const batch = ${{ github.event.inputs.batch }}
          const batch_count = ${{ github.event.inputs.batch_size }}

          const main = () => {
              let maps = [];
              if(batch == 2) {
                  maps = [1, 2, 9, 20, 11, 12, 19, 20];
              } else if(batch == 3) {
                  maps = [3, 5, 6, 7, 13, 15, 16, 17];
              } else if(batch == 6) {
                  maps = [4, 8, 14, 18];
              }
              
              const getRandomInt = (max) => {
                  return Math.floor(Math.random() * max);
              }

              let seed = 42;
              const map_json = [];
              for(let i = 0; i < batch_count; ++i) {
                  let all_players = [
                    '${{ github.event.inputs.P1 }}',
                    '${{ github.event.inputs.P2 }}',
                    '${{ github.event.inputs.P3 }}',
                    '${{ github.event.inputs.P4 }}',
                    '${{ github.event.inputs.P5 }}',
                    '${{ github.event.inputs.P6 }}'
                  ];
                  let players = all_players.slice(0, batch);
                  players = players.map(value => ({ value, sort: Math.random() }))
                                  .sort((a, b) => a.sort - b.sort)
                                  .map(({ value }) => value);
                  for(let p = 0; p < players.length; ++p) {
                      all_players[p] = players[p];
                  }
                  map_json.push({
                      map: maps[getRandomInt(maps.length)],
                      seed,
                      p0: all_players[0],
                      p1: all_players[1],
                      p2: all_players[2],
                      p3: all_players[3],
                      p4: all_players[4],
                      p5: all_players[5],
                  });
                  seed++;
              }

              return JSON.stringify(map_json);
          }

          main()
          "`

          echo "matrix={\"run\":$GENERATED}" >> $GITHUB_OUTPUT

  run:
    needs: generator
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJSON(needs.generator.outputs.matrix)}}
      max-parallel: 19
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GH_PAT }}

      - name: Run games
        run: |
          echo MAP=${{ matrix.run.map }} >> .env
          echo SEED=${{ matrix.run.seed }} >> .env
          echo P1=${{ matrix.run.p0 }} >> .env
          echo P2=${{ matrix.run.p1 }} >> .env
          echo P3=${{ matrix.run.p2 }} >> .env
          echo P4=${{ matrix.run.p3 }} >> .env
          echo P5=${{ matrix.run.p4 }} >> .env
          echo P6=${{ matrix.run.p5 }} >> .env

          docker compose up

          mkdir -p results/${{ matrix.run.map }}
          mv result.log results/${{ matrix.run.map }}/result-${{ matrix.run.seed }}.log

      - name: Upload run data
        uses: actions/upload-artifact@v3
        with:
          name: results
          path: results/

  collect:
    needs: run
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - run: |
          HEADER=""
          for DIRECTORY in results/*/;
          do
              FILENAME=`ls -AU $DIRECTORY | head -1`
              HEADER=$(head -n 1 $DIRECTORY/$FILENAME)
              echo $HEADER >> results.log
              for FILE in $DIRECTORY*;
              do
                  DATA=`cat $FILE | head -2 | tail -1`
                  echo $DATA >> results.log
              done
              mv results.log $DIRECTORY/results.log
          done

          echo $HEADER >> results.log

          for DIRECTORY in results/*;
          do
              DATA=(`cat $DIRECTORY/results.log | tail -n +2`)
              for str in ${DATA[@]}; do
                  echo $str >> results.log
              done
          done

      - name: Upload run data
        uses: actions/upload-artifact@v3
        with:
          name: results
          path: results/

  # run:
  #   needs: generator
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{fromJSON(needs.generator.outputs.matrix)}}
  #     max-parallel: 19
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Login to registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ secrets.GH_USERNAME }}
  #         password: ${{ secrets.GH_PAT }}

  #     - name: Run games
  #       run: |
  #         echo MAP=${{ matrix.run.map }} >> .env
  #         echo SEED=${{ matrix.run.seed }} >> .env
  #         echo P1=${{ github.event.inputs.P1 }} >> .env
  #         echo P2=${{ github.event.inputs.P2 }} >> .env
  #         echo P3=${{ github.event.inputs.P3 }} >> .env
  #         echo P4=${{ github.event.inputs.P4 }} >> .env
  #         echo P5=${{ github.event.inputs.P5 }} >> .env
  #         echo P6=${{ github.event.inputs.P6 }} >> .env

  #         docker compose up

  #         mkdir -p results/${{ matrix.run.map }}
  #         mv result.log results/${{ matrix.run.map }}/result-${{ matrix.run.seed }}.log

  #     - name: Upload run data
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: results
  #         path: results/

  # collect:
  #   needs: run
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3

  #     - run: |
  #         for DIRECTORY in results/*/;
  #         do
  #             FILENAME=`ls -AU $DIRECTORY | head -1`
  #             HEADER=$(head -n 1 $DIRECTORY/$FILENAME)
  #             echo $HEADER >> results.log
  #             for FILE in $DIRECTORY*;
  #             do
  #                 DATA=`cat $FILE | head -2 | tail -1`
  #                 echo $DATA >> results.log
  #             done
  #             mv results.log $DIRECTORY/results.log
  #         done

  #     - name: Upload run data
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: results
  #         path: results/
